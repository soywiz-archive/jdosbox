package jdos.hardware;

import jdos.gui.Render;
import sun.misc.Unsafe;

import java.lang.reflect.Field;
import java.util.Arrays;

final public class RAM {
    private static int[] direct;
    private static long unsafeAddress;
    private static int byteArrayOffset;
    private static boolean unsafeAvailable;
    private static Unsafe unsafe;

    static void alloc(int size) {
        if (unsafe == null) {
            try {
                Field theUnsafe = Unsafe.class.getDeclaredField("theUnsafe");
                theUnsafe.setAccessible(true);
                unsafe = (Unsafe) theUnsafe.get(null);
            } catch (Exception e) {
                System.out.println("Unsafe library not available, using fallback for RAM access");
            }
        }
        if (unsafe != null) {
            unsafeAddress = unsafe.allocateMemory(size);
            if (unsafeAddress != 0) {
                unsafeAvailable = true;
                byteArrayOffset = unsafe.arrayBaseOffset(byte[].class);;
            }
        }
        if (!unsafeAvailable)
            direct = new int[size >> 2];
    }

    static void free() {
        direct = null;
        if (unsafeAvailable) {
            unsafe.freeMemory(unsafeAddress);
            unsafeAddress = 0;
        }
    }

    public static byte readbs(/*HostPt*/int address) {
        return unsafe.getByte(address + unsafeAddress);
    }

    public static /*Bit8u*/short readb(/*HostPt*/int address) {
        return (short) (unsafe.getByte(address + unsafeAddress) & 0xFF);
    }

    public static /*Bit16u*/int readw(/*HostPt*/int address) {
        return unsafe.getShort(address + unsafeAddress) & 0xFFFF;
    }

    public static /*Bit32u*/int readd(/*HostPt*/int address) {
        return unsafe.getInt(address + unsafeAddress);
    }

    public static void writeb(/*HostPt*/int address,/*Bit8u*/ int value) {
        unsafe.putByte(address + unsafeAddress, (byte) value);
    }

    public static void writebs(/*HostPt*/int address, byte value) {
        unsafe.putByte(address + unsafeAddress, value);
    }

    public static void writew(/*HostPt*/int address,/*Bit16u*/int value) {
        unsafe.putShort(address + unsafeAddress, (short) value);
    }

    public static void writed(/*HostPt*/int address,/*Bit32u*/int val) {
        unsafe.putInt(address + unsafeAddress, val);
    }

    static public void memcpy(int dest, byte[] src, int srcOffset, /*Bitu*/int size) {
        unsafe.copyMemory(src, byteArrayOffset+srcOffset, null, dest+unsafeAddress, size);
    }

    static public void memcpy(byte[] dest, int dest_offset, /*PhysPt*/int src,/*Bitu*/int size) {
        unsafe.copyMemory(null, unsafeAddress+src, dest, byteArrayOffset+dest_offset, size);
    }

    static public void memcpy(Render.Render_t.SRC dst, int offset, /*PhysPt*/int src,/*Bitu*/int amount) {
        if (dst.outWrite8 != null)
            unsafe.copyMemory(null, src+unsafeAddress, dst.outWrite8, byteArrayOffset+offset, amount);
    }

    static public void memcpy(/*PhysPt*/int dst,/*PhysPt*/int src,/*Bitu*/int amount) {
        unsafe.copyMemory(null, unsafeAddress+src, null, unsafeAddress+dst, amount);
    }

    static public void zeroset(int dest, int size) {
        memset(dest, size, 0);
    }

    static public void memset(int dest, int size, int value) {
        unsafe.setMemory(unsafeAddress+dest, size, (byte)value);
    }
}
